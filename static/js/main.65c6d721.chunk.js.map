{"version":3,"sources":["utils/randomSongs.js","component/Question.js","utils/song.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","name","urlPath","forceUpdateAt","urlPathReal","showName","revealedClass","revealed","substring","length","class","title","width","height","src","frameBorder","allow","allowFullScreen","songs","sortSongArray","songsNum","Object","keys","sortArr","i","array","tmp","current","top","Math","floor","random","shuffle","map","key","index","sortKey","shift","songId","startSec","endSec","App","useState","isStarted","setIsStarted","songIndex","setSongIndex","Date","now","setForceUpdateAt","reveal","setReveal","Row","className","Col","md","Button","size","variant","onClick","e","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65c6d721.chunk.js","sourcesContent":["\nimport { songs } from './song.js';\n\nlet sortSongArray = [];\nconst songsNum = Object.keys(songs).length;\nfor (var sortArr = [], i = 0; i < songsNum; ++i) sortArr[i] = i;\n\nconst shuffle = array => {\n  let tmp, current, top = array.length;\n  if(top) while(--top) {\n    current = Math.floor(Math.random() * (top + 1));\n    tmp = array[current];\n    array[current] = array[top];\n    array[top] = tmp;\n  }\n\n  return array;\n}\n\nsortArr = shuffle(sortArr);\nObject.keys(songs).map((key, index) => {\n  const sortKey = sortArr.shift();\n  const songId = songs[key]['id'];\n  const startSec = songs[key]['startSec'];\n  const endSec = songs[key]['endSec'] || 8;\n  sortSongArray[sortKey] = {\n    'name'           : key,\n    'urlPath'        : `https://www.youtube.com/embed/${songId}?start=${startSec}&end=${endSec}` \n  };\n  return true;\n})\n\n\nexport default sortSongArray;\n","import React from 'react';\n\nconst Question = (props) => {\n  const {name, urlPath, forceUpdateAt, revealed} = props;\n  let urlPathReal = urlPath;\n  let showName = \"\";\n  let revealedClass = \"\";\n  if (revealed) {\n    urlPathReal = urlPath.substring(0, urlPath.length - 7);\n    showName = `歌名：${name}`;\n    revealedClass = \"revealed\";\n  }\n\n  return (\n    <div>\n    <h3>{`${showName}`}</h3>\n    <div class=\"youtube-container\">\n      <iframe\n        class={`${revealedClass}`}\n        title=\"songsVideo\" \n        width=\"100%\" \n        height=\"auto\" \n        src={`${urlPathReal}&forceUpdateAt=${forceUpdateAt}`}  \n        frameBorder=\"0\" \n        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n        allowFullScreen\n      ></iframe>\n  </div>\n  </div>\n  )\n}\n\nexport default Question;\n","const songs = {\n    \"刻在我心底的名字\" : {\n        \"id\"       : \"qe7iilOEWzM\",\n        \"startSec\" : 1\n    },\n    \"不曾回來過\" : {\n        \"id\"       : \"bbcO-Z7Ik1k\",\n        \"startSec\" : 1\n    },\n    \"旅行的意義\" : {\n        \"id\"       : \"m_AF8c4a06M\",\n        \"startSec\" : 1\n    },\n    \"倒帶\" : {\n        \"id\"       : \"vjRiJtF9WFg\",\n        \"startSec\" : 1\n    },\n    \"怎麼了\" : {\n        \"id\"       : \"wpc89JqlHLM\",\n        \"startSec\" : 1\n    }\n}\n\nexport {songs}\n","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n    Container, \n    Row,\n    Col, \n    Button \n} from 'react-bootstrap';\nimport Question from './component/Question';\nimport sortSongArray from './utils/randomSongs'\n\nconst App = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const [songIndex, setSongIndex] = useState(0);\n  const [forceUpdateAt, setForceUpdateAt] = useState(Date.now());\n  const [reveal, setReveal] = useState(false);\n\n  return (\n    <div>\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"12\">\n          <h1 className=\"top\">猜歌遊戲</h1>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-md-center\">\n        <Col md=\"8\">\n          { !isStarted && (\n            <Button \n              className=\"main-center\"\n              size=\"lg\" \n              variant=\"primary\" \n              onClick={e => setIsStarted(true)}\n            >\n              開始遊戲\n            </Button>\n            )\n          }\n          {\n            (isStarted && sortSongArray[songIndex]) && <div>\n              歌曲-{`${songIndex + 1}`}\n              <Question\n                forceUpdateAt={forceUpdateAt}\n                name={sortSongArray[songIndex]['name']}\n                urlPath={sortSongArray[songIndex]['urlPath']}\n                revealed={reveal}\n              />\n\n              <Button \n                className=\"center\"\n                size=\"lg\" \n                variant=\"success\" \n                onClick={e => {setReveal(false); setSongIndex(songIndex + 1)}}\n              >\n                下一題\n              </Button>\n              <Button \n                className=\"center\"\n                size=\"lg\" \n                variant=\"primary\" \n                onClick={e => {setReveal(false); setForceUpdateAt(Date.now())}}\n              >\n                重新\n              </Button>\n              <Button \n                className=\"center\"\n                size=\"lg\" \n                variant=\"danger\" \n                onClick={e => {setReveal(true)}}\n              >\n                看答案\n              </Button>\n              \n            </div>\n          }\n          {\n            (isStarted && !sortSongArray[songIndex]) && <div>\n              {/* <img width='100%' src='https://media.giphy.com/media/JltOMwYmi0VrO/giphy.gif' /> */}\n              <Button \n                className=\"main-center margin-top\"\n                size=\"lg\" \n                variant=\"primary\" \n                onClick={e => setSongIndex(0)}\n              >\n                再玩一次\n              </Button>\n            </div>\n          }\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst index = () => {\n  return (\n    <div>\n      <Container>\n        <App />\n      </Container>\n    </div>\n\n  )\n}\n\nexport default index;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}